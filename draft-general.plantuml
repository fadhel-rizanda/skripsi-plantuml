@startuml FuPet_Complete_Architecture
skinparam monochrome true
skinparam class {
  BackgroundColor White
  ArrowColor Black
  BorderColor Black
  FontColor Black
  FontSize 10
}
skinparam legend padding 10
hide circle
skinparam classAttributeIconSize 0


' ===================
' CLASSES
' ===================

class Status {
  + id: int
  + statusName: string
}

class Adoption {
  + id: uuid
  + pet_id: uuid (FK)
  + provider_id: uuid (FK)
  + adopter_id: uuid (FK)
  + status_id: int (FK)
  + created_at: datetime
  + updated_at: datetime
}

class Requirement {
  + id: uuid
  + adoption_id: uuid (FK)
  + requirement_text: string
  + status_id: int (FK)
  + created_at: datetime
}

class MeetNGreet {
  + id: uuid
  + adoption_id: uuid (FK)
  + status_id: int (FK)
  + created_at: datetime
}

class Handover {
  + id: uuid
  + adoption_id: uuid (FK)
  + status_id: int (FK)
  + created_at: datetime
}

class Schedule {
  + id: uuid
  + schedulable_id: uuid (FK)
  + schedulable_type: string
  + proposed_date: datetime
  + confirmed_date: datetime
  + proposed_by: uuid (FK)
  + status: string
}

class Attachment {
  + id: uuid
  + attachable_id: uuid (FK)
  + attachable_type: string
  + file_path: string
  + uploaded_by: uuid (FK)
  + created_at: datetime
}

class Pet {
  + id: uuid
  + name: string
  + species: string
  + age: int
  + owner_id: uuid (FK)
  + status_id: int (FK)
  + created_at: datetime
  + CreateDetail(): void
  + UpdateDetails(): void
}

class User {
  + id: uuid
  + username: string
  + password: string
  + email: string
  + created_at: datetime
  + register(): void
  + login(): void
}

class Chat {
  + id: uuid
  + adoption_id: uuid (FK)
  + created_at: datetime
}

class Message {
  + id: uuid
  + chat_id: uuid (FK)
  + sender_id: uuid (FK)
  + message: text
  + created_at: datetime
}

class Notification {
  + id: uuid
  + user_id: uuid (FK)
  + type: string
  + title: string
  + message: string
  + is_read: boolean
  + created_at: datetime
  + GetNotificationDetail(): void
  + MarkAsRead(): void
}

class Tag {
  + id: uuid
  + name: string
  + created_by: uuid (FK)
  + created_at: datetime
}

class Role {
  + id: int
  + name: string
  + created_at: datetime
  + AssignPermission(): void
}

class Permission {
  + id: int
  + name: string
  + description: string
}

class Post {
  + id: uuid
  + author_id: uuid (FK)
  + community_id: uuid (FK)
  + title: string
  + content: text
  + created_at: datetime
}

class Comment {
  + id: uuid
  + post_id: uuid (FK)
  + user_id: uuid (FK)
  + content: text
  + created_at: datetime
}

class Community {
  + id: uuid
  + name: string
  + description: text
  + created_at: datetime
}

class Reports {
  + id: uuid
  + reporter_id: uuid (FK)
  + reportable_id: uuid (FK)
  + reportable_type: string
  + reason: text
  + status: string
  + created_at: datetime
}

' ===================
' RELATIONSHIPS (Hubungan)
' ===================

' Status Relationships (Aggregation - Status can exist independently)
Status "1" o-- "0..*" Adoption
Status "1" o-- "0..*" Requirement
Status "1" o-- "0..*" MeetNGreet
Status "1" o-- "0..*" Handover

' Adoption Flow Relationships (Composition - these are part of Adoption lifecycle)
Adoption "1" *-- "0..*" Requirement
Adoption "1" *-- "0..1" Handover
Adoption "1" *-- "0..1" MeetNGreet

' Attachment Relationships (Composition - attachments belong to their parent)
Requirement "1" *-- "0..*" Attachment : fulfilled_by_adopter
Handover "1" *-- "0..*" Attachment : evidence_by_both
Pet "1" *-- "0..*" Attachment
Post "1" *-- "0..*" Attachment

' Schedule Relationships (Composition - schedule is part of the event)
MeetNGreet "1" *-- "1" Schedule : agreed_by_both
Handover "1" *-- "1" Schedule : agreed_by_both

' Pet Relationships
Pet "1..*" -- "1" Provider : owned_by
Pet "1" o-- "0..*" Tag : categorized_by
Pet "1" -- "0..1" Adoption

' User Relationships (Aggregation for roles - shared concept)
User "1..*" o-- "1..*" Role
User "1" *-- "0..*" Chat : initiates
User "1" *-- "0..*" Notification : receives
User "1" o-- "0..*" Tag : creates
User "1" *-- "0..*" Post : authored
User "0..*" -- "0..*" Post : liked
User "1" *-- "0..*" Comment : wrote
User "0..*" o-- "0..*" Community : member_of

' Generalization (Inheritance)
User <|-- Provider
User <|-- Adopter

' Adoption Relationships - Core roles
Provider "1" -- "0..*" Adoption : provides_pet
Adopter "1" -- "0..*" Adoption : applies_for

' Requirement Relationships - Main difference between Provider and Adopter
Provider "1" -- "0..*" Requirement : sets_requirements
Adopter "1" -- "0..*" Requirement : fulfills_requirements

' MeetNGreet Relationships - Both parties participate equally
Provider "1" -- "0..*" MeetNGreet : participates
Adopter "1" -- "0..*" MeetNGreet : participates

' Handover Relationships - Both parties participate equally
Provider "1" -- "0..*" Handover : participates
Adopter "1" -- "0..*" Handover : participates

' Role & Permission (Aggregation - permissions are shared across roles)
Role "1" o-- "0..*" Permission

' Chat & Message (Composition - messages belong to chat)
Chat "1" *-- "0..*" Message
Chat "2..*" -- "2..*" User : participants

' Post Relationships (Composition - comments belong to post)
Post "1" *-- "0..*" Comment
Post "1" o-- "0..*" Tag : tagged_with

' Community Relationships (Aggregation - posts and tags can exist independently)
Community "1" o-- "0..*" Post : contains
Community "1..*" -- "1..*" User : admins
Community "1" o-- "0..*" Tag : uses

' Reports Relationships (Aggregation - reported items exist independently)
Reports "1" -- "1" User : reported_by
Reports "0..*" o-- "0..1" User : reported_user
Reports "0..*" o-- "0..1" Pet : reported_pet
Reports "0..*" o-- "0..1" Post : reported_post
Reports "0..*" o-- "0..1" Community : reported_community

legend left
== Layer Deskripsi ==
**Generalization (<|--)**
- Provider and Adopter inherit from User
- They inherit all User attributes and relationships

**Provider & Adopter Roles in Adoption Process:**

**1. Requirement Phase (MAIN DIFFERENCE):**
   - Provider: Sets requirements that adopter must fulfill
   - Adopter: Fulfills requirements by providing documents/evidence

**2. MeetNGreet Phase (EQUAL PARTICIPATION):**
   - Both Provider & Adopter:
     • Propose schedule
     • Accept/Reject schedule proposals
     • Must agree on final schedule

**3. Handover Phase (EQUAL PARTICIPATION):**
   - Both Provider & Adopter:
     • Propose schedule
     • Accept/Reject schedule proposals
     • Upload evidence/documentation
     • Must agree on final schedule

**Composition (*--) used for:**
- Requirement, Handover, MeetNGreet → part of Adoption process
- Attachments → belong to their parent entities
- Schedule → integral part of events
- Messages → belong to Chat
- Comments → belong to Post
- Notifications → belong to User

**Aggregation (o--) used for:**
- Status relationships → statuses are shared references
- Tags → reusable across entities
- Roles & Permissions → shared security concepts
- Community posts → posts can exist outside community
- Reports → reported items exist independently

**Simple Association (--) used for:**
- Provider-Pet ownership
- Adoption process participants (Provider/Adopter)
- Process-specific responsibilities
- User-Community admin/member
- Many-to-many relationships
endlegend

@enduml